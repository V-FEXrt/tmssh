#!/usr/bin/env python

import sys
from os import path
from os import mkdir
from subprocess import call

version_string = '0.0.5'
tmssh_root = path.expanduser("~") + '/.tmssh/'
saved_ssh = tmssh_root + 'saved_ssh'

if not path.isdir(tmssh_root):
    mkdir(tmssh_root)

def writeToSavedSHH(text):
    with open(saved_ssh, 'a') as fo:
        fo.write(text)

def readFromSavedSSH():
    map = {}
    with open(saved_ssh, 'r') as fo:
        data = fo.read()

        for line in data.split('\n'):
            try:
                arr = line.split(',')
                map[arr[0]] = arr[1]
            except:
                pass
        
    return map

def version(args):
    print 'tmssh version ' + version_string + ' Developed by Ashley Coleman'

def list(args):
    longList = False

    if len(args) > 2:
        longList = (args[2].lower() == '-l')

    map = readFromSavedSSH()
    
    text = ''
    
    if longList:
        for name, address in  map.iteritems():
            text += name + ': ' + address + '\n'
    else:
        for name in map:
            text += name + '\n'

    print text[:-1]
        

def add(args):
    if len(args) != 4:
        print 'Incorrect format. Should be \'tmssh add user@server.com name\''
        return

    server = args[2]
    name = args[3]
    
    writeToSavedSHH(name +',' + server + '\n')

def help(args):
    print 'Help method'
    print 'To be implemented'

def run(args):
    map = readFromSavedSSH()
    try:
        param = map[args[1]]
        call(["ssh", param])
    except:
    	print 'Invalid name or command: \'' + args[1] +'\'.'

def remove(args):
    name = args[2]
    print 'Remove ' + name
    print 'To be implemented'

commandToFunction = {
    'version': version,
    'help' : help,
    'add': add,
    'list': list,
    'remove' : remove
}

try:
    commandToFunction[sys.argv[1]](sys.argv)
except: # Command not supported
    run(sys.argv)
